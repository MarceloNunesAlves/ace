#!/usr/bin/env python
# coding: utf8
#
# Andreas MÃ¼ller, 2009
# andrmuel@ee.ethz.ch
#
# This code may be freely used under GNU GPL conditions.

import Queue
import os
import sys
import unittest
from lxml.etree import XMLSyntaxError
from ace.io.sources import FileSource
from ace.util import configuration, logging
from ace.util.exceptions import *

class TestLineBasedTranslator(unittest.TestCase):
	"""
	Unittest for the class LineBased	
	"""
	
	def setUp(self):
		self.queue = Queue.Queue(1000)
		# slight hack to determine the path of this module, so that the XML
		# files can always be loaded from the same path (the current path can't
		# be used, because it depends on how the test is executed):
		self.basedir = os.path.dirname(os.path.abspath(sys.modules[__name__].__file__))+"/"
		self.config = configuration.Config()
		self.config.simulation = True
		self.config.realtime = False
		self.logger = logging.Logger(self.config)

	def testSSHLogEvent(self):
		"""
		Verifies, that events are correctly generated from test log messages.
		"""
		self.config.input = [{'source':"file:filename="+self.basedir+"test_100_sshlog.log", 'translator':"linebased:rulefile="+self.basedir+"test_100_sshrules.xml"}]
		source = FileSource(0, self.config, self.logger, self.queue)
		source.work()
		source.finish()
		# 3rd line should be dropped -> 4 events in total
		self.assertEquals(self.queue.qsize(), 3)
		# first event
		e = self.queue.get()
		self.assert_(e.name == "SSH:LOGIN:FAILED")
		self.assert_(e.host == "server-002")
		self.assert_(e.attributes['username'] == "root")
		self.assert_(e.attributes['srchost'] == "10.0.2.68")
		# second event
		e = self.queue.get()
		self.assert_(e.name == "SSH:LOGIN:SUCCESS")
		# third event
		e = self.queue.get()
		self.assert_(e.name == "SYSLOG:UNKNOWN")
		self.assert_(e.attributes.has_key('logline'))
		# third event should not have the following two attributes, as they were generated by earlier matches
		self.assertFalse(e.attributes.has_key('ignore1'))
		self.assertFalse(e.attributes.has_key('ignore2'))

	def testNoDTDFail(self):
		"""
		Verifies, that an omitted DTD specification results in an exception.
		"""
		self.config.input = [{'source':"file:filename="+self.basedir+"test_100_sshlog.log", 'translator':"linebased:rulefile="+self.basedir+"test_100_nodtd.xml"}]
		self.assertRaises(XMLSyntaxError, FileSource, 0, self.config, self.logger, self.queue)

	def testWrongDTDFail(self):
		"""
		Verifies, that an exception is generated if the root element is not translation_linebased.
		"""
		self.config.input = [{'source':"file:filename="+self.basedir+"test_100_sshlog.log", 'translator':"linebased:rulefile="+self.basedir+"test_100_wrongdtd.xml"}]
		self.assertRaises(InputTranslatorException, FileSource, 0, self.config, self.logger, self.queue)

	def testBadXMLFail(self):
		"""
		Verifies, that an exception is generated, if the XML file is not valid according to the given DTD.
		"""
		self.config.input = [{'source':"file:filename="+self.basedir+"test_100_sshlog.log", 'translator':"linebased:rulefile="+self.basedir+"test_100_invalidxml.xml"}]
		self.assertRaises(XMLSyntaxError, FileSource, 0, self.config, self.logger, self.queue)

if __name__ == '__main__':
	unittest.main()

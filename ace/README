Execution:
----------

The code can run from any directory, as long as the appropriate PYTHONPATH is
set. The main file is ace, which calls master.py.

Configuaration:
---------------

ace -C prints a template for the configuration file, with default values.
Explanations can be found in util/configuration.py, respectively the
corresponding autogenerated HTML documentation.

Typography:
-----------

- packages and modules use lowercase naming
- classes start with an upper case letter
- class methods use camelCase naming
- methods outside classes use lowercase naming
- class instances use lowercase naming
- constants use uppercase naming

Dependencies:
-------------

Always needed:

- lxml for XML parsing
 - lxml uses libxml2

Possibly needed:

- IPython (needed if IPython interactive console is requested)
- python-daemon and lockfile (needed for daemon mode)

Code overview:
--------------

ace 
 -> parses commandline options
 -> if requested, deamonizes the application
 -> runs master.py

master.py
 -> generates a logger and a config instance
 -> creates and starts a ticker instance
 -> starts threads for sources, sinks and core

ticker.py
 -> contains the Ticker class

core.py
 -> contains EventManager class (core)
 -> EventManager advances the Ticker

event.py
 -> Event class

cache.py
 -> classes for event cache

rulebase.py
 -> RuleManager, RuleParser and related classes

contexts.py
 -> classes for context management

basisfunctions/rulecomponents.py
 -> basis functions for correlation rules

io/sources/
 -> event sources
 -> make use of translators in translators/input/
 -> derived from base class in io/sources/base.py

io/sinks/
 -> event sinks
 -> make use of translators in translators/output/
 -> derived from base class in io/sinks/base.py

translators/input/
 -> input translators
 -> derived from base class in translators/input/base.py

translators/output/
 -> output translators
 -> derived from base class in translators/output/base.py

plugins/condition/
 -> condition plugins
 -> derived from base class in plugins/condition/base.py

plugins/action/
 -> action plugins
 -> derived from base class in plugins/action/base.py

util/configuration.py
 -> parses configuration file
 -> stores config information

util/exceptions.py
 -> custem Exceptions

util/logging.py
 -> logging to syslog and/or console (depends on configuration)
 -> loglevels: LOG_ERR, LOG_WARN, LOG_NOTICE, LOG_INFO, LOG_DEBUG
